-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj3\hdlsrc\gaussianFilter\gaussianF_ip_src_coeffs_memory.vhd
-- Created: 2024-06-04 12:27:50
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: gaussianF_ip_src_coeffs_memory
-- Source Path: gaussianFilter/gaussianFilter/Input_FIFOs/coeffs_memory
-- Hierarchy Level: 2
-- Model version: 8.37
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.gaussianF_ip_src_gaussianFilter_pkg.ALL;

ENTITY gaussianF_ip_src_coeffs_memory IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        coeffs_in_0                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_in_1                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_in_2                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_in_3                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_in_4                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_in_5                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_in_6                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_in_7                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_in_8                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        valid_in                          :   IN    std_logic;
        should_read                       :   IN    std_logic;
        coeffs_0                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_1                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_2                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_3                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_4                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_5                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_6                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_7                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_8                          :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END gaussianF_ip_src_coeffs_memory;


ARCHITECTURE rtl OF gaussianF_ip_src_coeffs_memory IS

  -- Signals
  SIGNAL should_read_counter_1            : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL should_read_count_is_max_1       : std_logic;
  SIGNAL should_read_first_1              : std_logic;
  SIGNAL valid_in_counter_1               : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL valid_in_count_is_max_1          : std_logic;
  SIGNAL valid_in_first_1                 : std_logic;
  SIGNAL coeffs_in                        : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL coeffs_hold                      : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL coeffs_hold_hold_1               : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL coeffs_out                       : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]
  SIGNAL coeffs_out_hold_1                : vector_of_std_logic_vector32(0 TO 8);  -- ufix32 [9]

BEGIN
  -- Count limited, Unsigned Counter
  --  initial value   = 360960
  --  step value      = 1
  --  count to value  = 360960
  should_read_counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        should_read_counter_1 <= to_unsigned(16#58200#, 19);
      ELSIF enb = '1' THEN
        IF should_read = '1' THEN 
          IF should_read_counter_1 >= to_unsigned(16#58200#, 19) THEN 
            should_read_counter_1 <= to_unsigned(16#00001#, 19);
          ELSE 
            should_read_counter_1 <= should_read_counter_1 + to_unsigned(16#00001#, 19);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS should_read_counter_process;


  
  should_read_count_is_max_1 <= '1' WHEN should_read_counter_1 = to_unsigned(16#58200#, 19) ELSE
      '0';

  should_read_first_1 <= should_read AND should_read_count_is_max_1;

  -- Count limited, Unsigned Counter
  --  initial value   = 360960
  --  step value      = 1
  --  count to value  = 360960
  valid_in_counter_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        valid_in_counter_1 <= to_unsigned(16#58200#, 19);
      ELSIF enb = '1' THEN
        IF valid_in = '1' THEN 
          IF valid_in_counter_1 >= to_unsigned(16#58200#, 19) THEN 
            valid_in_counter_1 <= to_unsigned(16#00001#, 19);
          ELSE 
            valid_in_counter_1 <= valid_in_counter_1 + to_unsigned(16#00001#, 19);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS valid_in_counter_process;


  
  valid_in_count_is_max_1 <= '1' WHEN valid_in_counter_1 = to_unsigned(16#58200#, 19) ELSE
      '0';

  valid_in_first_1 <= valid_in AND valid_in_count_is_max_1;

  coeffs_in(0) <= coeffs_in_0;
  coeffs_in(1) <= coeffs_in_1;
  coeffs_in(2) <= coeffs_in_2;
  coeffs_in(3) <= coeffs_in_3;
  coeffs_in(4) <= coeffs_in_4;
  coeffs_in(5) <= coeffs_in_5;
  coeffs_in(6) <= coeffs_in_6;
  coeffs_in(7) <= coeffs_in_7;
  coeffs_in(8) <= coeffs_in_8;

  coeffs_hold_hold_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        coeffs_hold_hold_1 <= (OTHERS => X"00000000");
      ELSIF enb = '1' THEN
        coeffs_hold_hold_1 <= coeffs_hold;
      END IF;
    END IF;
  END PROCESS coeffs_hold_hold_process;


  
  coeffs_hold <= coeffs_hold_hold_1 WHEN valid_in_first_1 = '0' ELSE
      coeffs_in;

  coeffs_out_hold_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        coeffs_out_hold_1 <= (OTHERS => X"00000000");
      ELSIF enb = '1' THEN
        coeffs_out_hold_1 <= coeffs_out;
      END IF;
    END IF;
  END PROCESS coeffs_out_hold_process;


  
  coeffs_out <= coeffs_out_hold_1 WHEN should_read_first_1 = '0' ELSE
      coeffs_hold;

  coeffs_0 <= coeffs_out(0);

  coeffs_1 <= coeffs_out(1);

  coeffs_2 <= coeffs_out(2);

  coeffs_3 <= coeffs_out(3);

  coeffs_4 <= coeffs_out(4);

  coeffs_5 <= coeffs_out(5);

  coeffs_6 <= coeffs_out(6);

  coeffs_7 <= coeffs_out(7);

  coeffs_8 <= coeffs_out(8);

END rtl;

