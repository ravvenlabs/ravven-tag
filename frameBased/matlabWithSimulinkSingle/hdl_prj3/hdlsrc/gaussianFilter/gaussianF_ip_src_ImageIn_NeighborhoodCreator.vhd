-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj3\hdlsrc\gaussianFilter\gaussianF_ip_src_ImageIn_NeighborhoodCreator.vhd
-- Created: 2024-06-04 12:27:50
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: gaussianF_ip_src_ImageIn_NeighborhoodCreator
-- Source Path: 
-- Hierarchy Level: 2
-- Model version: 8.37
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY gaussianF_ip_src_ImageIn_NeighborhoodCreator IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        ImageIn                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        ImageIn_valid                     :   IN    std_logic;
        in_neighborhood_0                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        in_neighborhood_1                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        in_neighborhood_2                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        in_neighborhood_3                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        in_neighborhood_4                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        in_neighborhood_5                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        in_neighborhood_6                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        in_neighborhood_7                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        in_neighborhood_8                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        in_neighborhood_valid             :   OUT   std_logic
        );
END gaussianF_ip_src_ImageIn_NeighborhoodCreator;


ARCHITECTURE rtl OF gaussianF_ip_src_ImageIn_NeighborhoodCreator IS

  -- Component Declarations
  COMPONENT gaussianF_ip_src_counterNetwork
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          validNext                       :   IN    std_logic;
          valid                           :   IN    std_logic;
          isLastSample                    :   OUT   std_logic;
          isEndOfLine                     :   OUT   std_logic;
          rowCtr                          :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
          colCtr                          :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          pxlCtr                          :   OUT   std_logic_vector(18 DOWNTO 0);  -- ufix19
          isEndOfLineEnd                  :   OUT   std_logic;
          rowCtrEnd                       :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
          colCtrEnd                       :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          pxlCtrEnd                       :   OUT   std_logic_vector(18 DOWNTO 0)  -- ufix19
          );
  END COMPONENT;

  COMPONENT gaussianF_ip_src_NeighborhoodCreator_3x3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          sample                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          valid                           :   IN    std_logic;
          isLastSample                    :   IN    std_logic;
          neighborhood_0                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          neighborhood_1                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          neighborhood_2                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          neighborhood_3                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          neighborhood_4                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          neighborhood_5                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          neighborhood_6                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          neighborhood_7                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          neighborhood_8                  :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT gaussianF_ip_src_boundaryCounters_3_3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          validNext                       :   IN    std_logic;
          valid                           :   IN    std_logic;
          isLastSample                    :   IN    std_logic;
          isEndOfLine                     :   IN    std_logic;
          rowCtr                          :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          colCtr                          :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          pxlCtr                          :   IN    std_logic_vector(18 DOWNTO 0);  -- ufix19
          isEndOfLineEnd                  :   IN    std_logic;
          rowCtrEnd                       :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          colCtrEnd                       :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          pxlCtrEnd                       :   IN    std_logic_vector(18 DOWNTO 0);  -- ufix19
          rowCtr_3_3                      :   OUT   std_logic_vector(8 DOWNTO 0);  -- ufix9
          colCtr_3_3                      :   OUT   std_logic_vector(9 DOWNTO 0);  -- ufix10
          shift_3_3                       :   OUT   std_logic;  -- ufix1
          valid_3_3                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT gaussianF_ip_src_BoundaryCheck_3x3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          maxNeighborhood_0               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          maxNeighborhood_1               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          maxNeighborhood_2               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          maxNeighborhood_3               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          maxNeighborhood_4               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          maxNeighborhood_5               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          maxNeighborhood_6               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          maxNeighborhood_7               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          maxNeighborhood_8               :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          rowCtr                          :   IN    std_logic_vector(8 DOWNTO 0);  -- ufix9
          colCtr                          :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          shift                           :   IN    std_logic;  -- ufix1
          neighborhood_3x3_0              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          neighborhood_3x3_1              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          neighborhood_3x3_2              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          neighborhood_3x3_3              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          neighborhood_3x3_4              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          neighborhood_3x3_5              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          neighborhood_3x3_6              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          neighborhood_3x3_7              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          neighborhood_3x3_8              :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : gaussianF_ip_src_counterNetwork
    USE ENTITY work.gaussianF_ip_src_counterNetwork(rtl);

  FOR ALL : gaussianF_ip_src_NeighborhoodCreator_3x3
    USE ENTITY work.gaussianF_ip_src_NeighborhoodCreator_3x3(rtl);

  FOR ALL : gaussianF_ip_src_boundaryCounters_3_3
    USE ENTITY work.gaussianF_ip_src_boundaryCounters_3_3(rtl);

  FOR ALL : gaussianF_ip_src_BoundaryCheck_3x3
    USE ENTITY work.gaussianF_ip_src_BoundaryCheck_3x3(rtl);

  -- Signals
  SIGNAL sample_1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL valid_1                          : std_logic;
  SIGNAL isLastSample                     : std_logic;
  SIGNAL isEndOfLine                      : std_logic;
  SIGNAL rowCtr                           : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL colCtr                           : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL pxlCtr                           : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL isEndOfLineEnd                   : std_logic;
  SIGNAL rowCtrEnd                        : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL colCtrEnd                        : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL pxlCtrEnd                        : std_logic_vector(18 DOWNTO 0);  -- ufix19
  SIGNAL neighborhood_0                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL neighborhood_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL neighborhood_2                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL neighborhood_3                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL neighborhood_4                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL neighborhood_5                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL neighborhood_6                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL neighborhood_7                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL neighborhood_8                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL rowCtr_3_3                       : std_logic_vector(8 DOWNTO 0);  -- ufix9
  SIGNAL colCtr_3_3                       : std_logic_vector(9 DOWNTO 0);  -- ufix10
  SIGNAL shift_3_3                        : std_logic;  -- ufix1
  SIGNAL valid_3_3                        : std_logic;
  SIGNAL neighborhood_3x3_0               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL neighborhood_3x3_1               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL neighborhood_3x3_2               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL neighborhood_3x3_3               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL neighborhood_3x3_4               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL neighborhood_3x3_5               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL neighborhood_3x3_6               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL neighborhood_3x3_7               : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL neighborhood_3x3_8               : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_counterNetwork : gaussianF_ip_src_counterNetwork
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              validNext => ImageIn_valid,
              valid => valid_1,
              isLastSample => isLastSample,
              isEndOfLine => isEndOfLine,
              rowCtr => rowCtr,  -- ufix9
              colCtr => colCtr,  -- ufix10
              pxlCtr => pxlCtr,  -- ufix19
              isEndOfLineEnd => isEndOfLineEnd,
              rowCtrEnd => rowCtrEnd,  -- ufix9
              colCtrEnd => colCtrEnd,  -- ufix10
              pxlCtrEnd => pxlCtrEnd  -- ufix19
              );

  u_NeighborhoodCreator_3x3 : gaussianF_ip_src_NeighborhoodCreator_3x3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              sample => sample_1,  -- single
              valid => valid_1,
              isLastSample => isLastSample,
              neighborhood_0 => neighborhood_0,  -- single
              neighborhood_1 => neighborhood_1,  -- single
              neighborhood_2 => neighborhood_2,  -- single
              neighborhood_3 => neighborhood_3,  -- single
              neighborhood_4 => neighborhood_4,  -- single
              neighborhood_5 => neighborhood_5,  -- single
              neighborhood_6 => neighborhood_6,  -- single
              neighborhood_7 => neighborhood_7,  -- single
              neighborhood_8 => neighborhood_8  -- single
              );

  u_boundaryCounters_3_3 : gaussianF_ip_src_boundaryCounters_3_3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              validNext => ImageIn_valid,
              valid => valid_1,
              isLastSample => isLastSample,
              isEndOfLine => isEndOfLine,
              rowCtr => rowCtr,  -- ufix9
              colCtr => colCtr,  -- ufix10
              pxlCtr => pxlCtr,  -- ufix19
              isEndOfLineEnd => isEndOfLineEnd,
              rowCtrEnd => rowCtrEnd,  -- ufix9
              colCtrEnd => colCtrEnd,  -- ufix10
              pxlCtrEnd => pxlCtrEnd,  -- ufix19
              rowCtr_3_3 => rowCtr_3_3,  -- ufix9
              colCtr_3_3 => colCtr_3_3,  -- ufix10
              shift_3_3 => shift_3_3,  -- ufix1
              valid_3_3 => valid_3_3
              );

  u_BoundaryCheck_3x3 : gaussianF_ip_src_BoundaryCheck_3x3
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              maxNeighborhood_0 => neighborhood_0,  -- single
              maxNeighborhood_1 => neighborhood_1,  -- single
              maxNeighborhood_2 => neighborhood_2,  -- single
              maxNeighborhood_3 => neighborhood_3,  -- single
              maxNeighborhood_4 => neighborhood_4,  -- single
              maxNeighborhood_5 => neighborhood_5,  -- single
              maxNeighborhood_6 => neighborhood_6,  -- single
              maxNeighborhood_7 => neighborhood_7,  -- single
              maxNeighborhood_8 => neighborhood_8,  -- single
              rowCtr => rowCtr_3_3,  -- ufix9
              colCtr => colCtr_3_3,  -- ufix10
              shift => shift_3_3,  -- ufix1
              neighborhood_3x3_0 => neighborhood_3x3_0,  -- single
              neighborhood_3x3_1 => neighborhood_3x3_1,  -- single
              neighborhood_3x3_2 => neighborhood_3x3_2,  -- single
              neighborhood_3x3_3 => neighborhood_3x3_3,  -- single
              neighborhood_3x3_4 => neighborhood_3x3_4,  -- single
              neighborhood_3x3_5 => neighborhood_3x3_5,  -- single
              neighborhood_3x3_6 => neighborhood_3x3_6,  -- single
              neighborhood_3x3_7 => neighborhood_3x3_7,  -- single
              neighborhood_3x3_8 => neighborhood_3x3_8  -- single
              );

  sample_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sample_1 <= X"00000000";
      ELSIF enb = '1' THEN
        sample_1 <= ImageIn;
      END IF;
    END IF;
  END PROCESS sample_process;


  valid_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        valid_1 <= '0';
      ELSIF enb = '1' THEN
        valid_1 <= ImageIn_valid;
      END IF;
    END IF;
  END PROCESS valid_process;


  in_neighborhood_0 <= neighborhood_3x3_0;

  in_neighborhood_1 <= neighborhood_3x3_1;

  in_neighborhood_2 <= neighborhood_3x3_2;

  in_neighborhood_3 <= neighborhood_3x3_3;

  in_neighborhood_4 <= neighborhood_3x3_4;

  in_neighborhood_5 <= neighborhood_3x3_5;

  in_neighborhood_6 <= neighborhood_3x3_6;

  in_neighborhood_7 <= neighborhood_3x3_7;

  in_neighborhood_8 <= neighborhood_3x3_8;

  in_neighborhood_valid <= valid_3_3;

END rtl;

