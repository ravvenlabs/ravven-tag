-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj1\hdlsrc\gaussianFilter\gaussianF_ip_src_Input_FIFOs.vhd
-- Created: 2024-06-04 12:57:05
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: gaussianF_ip_src_Input_FIFOs
-- Source Path: gaussianFilter/gaussianFilter/Input_FIFOs
-- Hierarchy Level: 1
-- Model version: 8.37
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY gaussianF_ip_src_Input_FIFOs IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enable_in                         :   IN    std_logic;
        imageIn_in                        :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        imageIn_valid                     :   IN    std_logic;
        coeffs_in_0                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_in_1                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_in_2                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_in_3                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_in_4                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_in_5                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_in_6                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_in_7                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_in_8                       :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        enable_out                        :   OUT   std_logic;
        imageIn_out                       :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        imageIn_ready                     :   OUT   std_logic;
        coeffs_0                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_1                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_2                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_3                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_4                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_5                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_6                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_7                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        coeffs_8                          :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
        valid                             :   OUT   std_logic
        );
END gaussianF_ip_src_Input_FIFOs;


ARCHITECTURE rtl OF gaussianF_ip_src_Input_FIFOs IS

  -- Component Declarations
  COMPONENT gaussianF_ip_src_imageIn_FIFO
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          imageIn_in                      :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          valid_in                        :   IN    std_logic;
          should_read                     :   IN    std_logic;
          imageIn_out                     :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
          imageIn_ready                   :   OUT   std_logic;
          imageIn_has_data                :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT gaussianF_ip_src_coeffs_memory
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          coeffs_in_0                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          coeffs_in_1                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          coeffs_in_2                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          coeffs_in_3                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          coeffs_in_4                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          coeffs_in_5                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          coeffs_in_6                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          coeffs_in_7                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          coeffs_in_8                     :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          valid_in                        :   IN    std_logic;
          should_read                     :   IN    std_logic;
          coeffs_0                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          coeffs_1                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          coeffs_2                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          coeffs_3                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          coeffs_4                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          coeffs_5                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          coeffs_6                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          coeffs_7                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          coeffs_8                        :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : gaussianF_ip_src_imageIn_FIFO
    USE ENTITY work.gaussianF_ip_src_imageIn_FIFO(rtl);

  FOR ALL : gaussianF_ip_src_coeffs_memory
    USE ENTITY work.gaussianF_ip_src_coeffs_memory(rtl);

  -- Signals
  SIGNAL imageIn_has_data                 : std_logic;
  SIGNAL valid_1                          : std_logic;
  SIGNAL imageIn_out_tmp                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL coeffs_0_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL coeffs_1_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL coeffs_2_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL coeffs_3_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL coeffs_4_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL coeffs_5_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL coeffs_6_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL coeffs_7_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL coeffs_8_1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_imageIn_FIFO : gaussianF_ip_src_imageIn_FIFO
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              imageIn_in => imageIn_in,  -- uint32
              valid_in => imageIn_valid,
              should_read => valid_1,
              imageIn_out => imageIn_out_tmp,  -- uint32
              imageIn_ready => imageIn_ready,
              imageIn_has_data => imageIn_has_data
              );

  u_coeffs_memory : gaussianF_ip_src_coeffs_memory
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              coeffs_in_0 => coeffs_in_0,  -- single
              coeffs_in_1 => coeffs_in_1,  -- single
              coeffs_in_2 => coeffs_in_2,  -- single
              coeffs_in_3 => coeffs_in_3,  -- single
              coeffs_in_4 => coeffs_in_4,  -- single
              coeffs_in_5 => coeffs_in_5,  -- single
              coeffs_in_6 => coeffs_in_6,  -- single
              coeffs_in_7 => coeffs_in_7,  -- single
              coeffs_in_8 => coeffs_in_8,  -- single
              valid_in => imageIn_valid,
              should_read => valid_1,
              coeffs_0 => coeffs_0_1,  -- single
              coeffs_1 => coeffs_1_1,  -- single
              coeffs_2 => coeffs_2_1,  -- single
              coeffs_3 => coeffs_3_1,  -- single
              coeffs_4 => coeffs_4_1,  -- single
              coeffs_5 => coeffs_5_1,  -- single
              coeffs_6 => coeffs_6_1,  -- single
              coeffs_7 => coeffs_7_1,  -- single
              coeffs_8 => coeffs_8_1  -- single
              );

  enable_out <= enable_in;

  valid_1 <= enable_in AND imageIn_has_data;

  coeffs_0 <= coeffs_0_1;

  coeffs_1 <= coeffs_1_1;

  coeffs_2 <= coeffs_2_1;

  coeffs_3 <= coeffs_3_1;

  coeffs_4 <= coeffs_4_1;

  coeffs_5 <= coeffs_5_1;

  coeffs_6 <= coeffs_6_1;

  coeffs_7 <= coeffs_7_1;

  coeffs_8 <= coeffs_8_1;

  imageIn_out <= imageIn_out_tmp;

  valid <= valid_1;

END rtl;

