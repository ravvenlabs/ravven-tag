-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj1\hdlsrc\gaussianFilter\gaussianF_ip_addr_decoder.vhd
-- Created: 2024-06-04 12:57:18
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: gaussianF_ip_addr_decoder
-- Source Path: gaussianF_ip/gaussianF_ip_axi_lite/gaussianF_ip_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.gaussianF_ip_pkg.ALL;

ENTITY gaussianF_ip_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_axi4_stream_video_slave_image_width :   IN    std_logic_vector(12 DOWNTO 0);  -- ufix13
        read_axi4_stream_video_slave_image_height :   IN    std_logic_vector(12 DOWNTO 0);  -- ufix13
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_axi4_stream_video_slave_hporch :   OUT   std_logic_vector(12 DOWNTO 0);  -- ufix13
        write_axi4_stream_video_slave_vporch :   OUT   std_logic_vector(12 DOWNTO 0);  -- ufix13
        write_coeffs_0                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_coeffs_1                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_coeffs_2                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_coeffs_3                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_coeffs_4                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_coeffs_5                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_coeffs_6                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_coeffs_7                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_coeffs_8                    :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END gaussianF_ip_addr_decoder;


ARCHITECTURE rtl OF gaussianF_ip_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_coeffs_9_1            : std_logic;  -- ufix1
  SIGNAL decode_sel_coeffs_8_1            : std_logic;  -- ufix1
  SIGNAL decode_sel_coeffs_7_1            : std_logic;  -- ufix1
  SIGNAL decode_sel_coeffs_6_1            : std_logic;  -- ufix1
  SIGNAL decode_sel_coeffs_5_1            : std_logic;  -- ufix1
  SIGNAL decode_sel_coeffs_4_1            : std_logic;  -- ufix1
  SIGNAL decode_sel_coeffs_3_1            : std_logic;  -- ufix1
  SIGNAL decode_sel_coeffs_2_1            : std_logic;  -- ufix1
  SIGNAL decode_sel_coeffs_1_1            : std_logic;  -- ufix1
  SIGNAL decode_sel_ip_timestamp_1_1      : std_logic;  -- ufix1
  SIGNAL decode_sel_axi4_stream_video_slave_vporch_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_axi4_stream_video_slave_hporch_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_axi4_stream_video_slave_image_width_1_1 : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_enable_1_1        : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_axi_enable_1_1           : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL data_reg_axi_enable_1_1          : std_logic;  -- ufix1
  SIGNAL data_slice_axi_enable_1          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_axi4_stream_video_slave_image_width_unsigned : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL read_axi4_stream_video_slave_image_height_unsigned : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL decode_sel_axi4_stream_video_slave_image_height_1_1 : std_logic;  -- ufix1
  SIGNAL decode_rd_axi_enable_1_1         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_axi4_stream_video_slave_image_width : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL data_slice_axi4_stream_video_slave_image_width_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_axi4_stream_video_slave_image_width_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_axi4_stream_video_slave_image_height : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL data_slice_axi4_stream_video_slave_image_height_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_axi4_stream_video_slave_image_height_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_axi4_stream_video_slave_hporch_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_axi4_stream_video_slave_hporch : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL data_reg_axi4_stream_video_slave_hporch_1_1 : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL data_slice_axi4_stream_video_slave_hporch_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_axi4_stream_video_slave_hporch_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_axi4_stream_video_slave_vporch_1_1 : std_logic;  -- ufix1
  SIGNAL data_in_axi4_stream_video_slave_vporch : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL data_reg_axi4_stream_video_slave_vporch_1_1 : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL data_slice_axi4_stream_video_slave_vporch_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_axi4_stream_video_slave_vporch_1_1 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp_1_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_sel_coeffs                : std_logic;  -- ufix1
  SIGNAL strobe_sel_coeffs                : std_logic;  -- ufix1
  SIGNAL const_zero                       : std_logic;  -- ufix1
  SIGNAL strobe_in_coeffs                 : std_logic;  -- ufix1
  SIGNAL strobe_sw_coeffs                 : std_logic;  -- ufix1
  SIGNAL reg_enb_coeffs_1_1               : std_logic;  -- ufix1
  SIGNAL data_reg_coeffs_1_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_coeffs_2_1               : std_logic;  -- ufix1
  SIGNAL data_reg_coeffs_2_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_coeffs_3_1               : std_logic;  -- ufix1
  SIGNAL data_reg_coeffs_3_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_coeffs_4_1               : std_logic;  -- ufix1
  SIGNAL data_reg_coeffs_4_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_coeffs_5_1               : std_logic;  -- ufix1
  SIGNAL data_reg_coeffs_5_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_coeffs_6_1               : std_logic;  -- ufix1
  SIGNAL data_reg_coeffs_6_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_coeffs_7_1               : std_logic;  -- ufix1
  SIGNAL data_reg_coeffs_7_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_coeffs_8_1               : std_logic;  -- ufix1
  SIGNAL data_reg_coeffs_8_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_coeffs_9_1               : std_logic;  -- ufix1
  SIGNAL strobe_reg_coeffs                : std_logic;  -- ufix1
  SIGNAL data_reg_coeffs_9_1              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL write_reg_coeffs                 : vector_of_unsigned32(0 TO 8);  -- ufix32 [9]
  SIGNAL sync_reg_coeffs_1                : vector_of_unsigned32(0 TO 8);  -- ufix32 [9]
  SIGNAL data_slice_coeffs_1_0            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_coeffs_1_1             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_slice_coeffs_1_1            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_coeffs_1_2             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_slice_coeffs_1_2            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_coeffs_1_3             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_slice_coeffs_1_3            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_coeffs_1_4             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_slice_coeffs_1_4            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_coeffs_1_5             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_slice_coeffs_1_5            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_coeffs_1_6             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_slice_coeffs_1_6            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_coeffs_1_7             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_slice_coeffs_1_7            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_coeffs_1_8             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_slice_coeffs_1_8            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_coeffs_1_9             : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_coeffs_9_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0048#, 14) ELSE
      '0';

  
  decode_sel_coeffs_8_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0047#, 14) ELSE
      '0';

  
  decode_sel_coeffs_7_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0046#, 14) ELSE
      '0';

  
  decode_sel_coeffs_6_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0045#, 14) ELSE
      '0';

  
  decode_sel_coeffs_5_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0044#, 14) ELSE
      '0';

  
  decode_sel_coeffs_4_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0043#, 14) ELSE
      '0';

  
  decode_sel_coeffs_3_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0042#, 14) ELSE
      '0';

  
  decode_sel_coeffs_2_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  
  decode_sel_coeffs_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  
  decode_sel_ip_timestamp_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0006#, 14) ELSE
      '0';

  
  decode_sel_axi4_stream_video_slave_vporch_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0005#, 14) ELSE
      '0';

  
  decode_sel_axi4_stream_video_slave_hporch_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0004#, 14) ELSE
      '0';

  
  decode_sel_axi4_stream_video_slave_image_width_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  
  decode_sel_axi_enable_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_enb_axi_enable_1_1 <= decode_sel_axi_enable_1_1 AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  const_1_1 <= '1';

  enb <= const_1_1;

  reg_axi_enable_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi_enable_1_1 <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable_1_1 = '1' THEN
        data_reg_axi_enable_1_1 <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_1_1_process;


  data_slice_axi_enable_1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & data_reg_axi_enable_1_1;

  read_axi4_stream_video_slave_image_width_unsigned <= unsigned(read_axi4_stream_video_slave_image_width);

  read_axi4_stream_video_slave_image_height_unsigned <= unsigned(read_axi4_stream_video_slave_image_height);

  
  decode_sel_axi4_stream_video_slave_image_height_1_1 <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0003#, 14) ELSE
      '0';

  
  decode_rd_axi_enable_1_1 <= const_0 WHEN decode_sel_axi_enable_1_1 = '0' ELSE
      data_slice_axi_enable_1;

  reg_axi4_stream_video_slave_image_width_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_axi4_stream_video_slave_image_width <= to_unsigned(16#0000#, 13);
      ELSIF enb = '1' THEN
        read_reg_axi4_stream_video_slave_image_width <= read_axi4_stream_video_slave_image_width_unsigned;
      END IF;
    END IF;
  END PROCESS reg_axi4_stream_video_slave_image_width_process;


  data_slice_axi4_stream_video_slave_image_width_1 <= resize(read_reg_axi4_stream_video_slave_image_width, 32);

  
  decode_rd_axi4_stream_video_slave_image_width_1_1 <= decode_rd_axi_enable_1_1 WHEN decode_sel_axi4_stream_video_slave_image_width_1_1 = '0' ELSE
      data_slice_axi4_stream_video_slave_image_width_1;

  reg_axi4_stream_video_slave_image_height_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_axi4_stream_video_slave_image_height <= to_unsigned(16#0000#, 13);
      ELSIF enb = '1' THEN
        read_reg_axi4_stream_video_slave_image_height <= read_axi4_stream_video_slave_image_height_unsigned;
      END IF;
    END IF;
  END PROCESS reg_axi4_stream_video_slave_image_height_process;


  data_slice_axi4_stream_video_slave_image_height_1 <= resize(read_reg_axi4_stream_video_slave_image_height, 32);

  
  decode_rd_axi4_stream_video_slave_image_height_1_1 <= decode_rd_axi4_stream_video_slave_image_width_1_1 WHEN decode_sel_axi4_stream_video_slave_image_height_1_1 = '0' ELSE
      data_slice_axi4_stream_video_slave_image_height_1;

  reg_enb_axi4_stream_video_slave_hporch_1_1 <= decode_sel_axi4_stream_video_slave_hporch_1_1 AND wr_enb;

  data_in_axi4_stream_video_slave_hporch <= data_write_unsigned(12 DOWNTO 0);

  reg_axi4_stream_video_slave_hporch_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi4_stream_video_slave_hporch_1_1 <= to_unsigned(16#0118#, 13);
      ELSIF enb = '1' AND reg_enb_axi4_stream_video_slave_hporch_1_1 = '1' THEN
        data_reg_axi4_stream_video_slave_hporch_1_1 <= data_in_axi4_stream_video_slave_hporch;
      END IF;
    END IF;
  END PROCESS reg_axi4_stream_video_slave_hporch_1_1_process;


  data_slice_axi4_stream_video_slave_hporch_1 <= resize(data_reg_axi4_stream_video_slave_hporch_1_1, 32);

  
  decode_rd_axi4_stream_video_slave_hporch_1_1 <= decode_rd_axi4_stream_video_slave_image_height_1_1 WHEN decode_sel_axi4_stream_video_slave_hporch_1_1 = '0' ELSE
      data_slice_axi4_stream_video_slave_hporch_1;

  reg_enb_axi4_stream_video_slave_vporch_1_1 <= decode_sel_axi4_stream_video_slave_vporch_1_1 AND wr_enb;

  data_in_axi4_stream_video_slave_vporch <= data_write_unsigned(12 DOWNTO 0);

  reg_axi4_stream_video_slave_vporch_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_axi4_stream_video_slave_vporch_1_1 <= to_unsigned(16#002D#, 13);
      ELSIF enb = '1' AND reg_enb_axi4_stream_video_slave_vporch_1_1 = '1' THEN
        data_reg_axi4_stream_video_slave_vporch_1_1 <= data_in_axi4_stream_video_slave_vporch;
      END IF;
    END IF;
  END PROCESS reg_axi4_stream_video_slave_vporch_1_1_process;


  data_slice_axi4_stream_video_slave_vporch_1 <= resize(data_reg_axi4_stream_video_slave_vporch_1_1, 32);

  
  decode_rd_axi4_stream_video_slave_vporch_1_1 <= decode_rd_axi4_stream_video_slave_hporch_1_1 WHEN decode_sel_axi4_stream_video_slave_vporch_1_1 = '0' ELSE
      data_slice_axi4_stream_video_slave_vporch_1;

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  reg_ip_timestamp_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_ip_timestamp <= to_unsigned(0, 32);
      ELSIF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp_1_1 <= decode_rd_axi4_stream_video_slave_vporch_1_1 WHEN decode_sel_ip_timestamp_1_1 = '0' ELSE
      read_reg_ip_timestamp;

  
  decode_sel_coeffs <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0050#, 14) ELSE
      '0';

  strobe_sel_coeffs <= decode_sel_coeffs AND wr_enb;

  const_zero <= '0';

  strobe_in_coeffs <= data_write_unsigned(0);

  
  strobe_sw_coeffs <= const_zero WHEN strobe_sel_coeffs = '0' ELSE
      strobe_in_coeffs;

  reg_enb_coeffs_1_1 <= decode_sel_coeffs_1_1 AND wr_enb;

  reg_coeffs_1_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_coeffs_1_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_coeffs_1_1 = '1' THEN
        data_reg_coeffs_1_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_coeffs_1_1_process;


  reg_enb_coeffs_2_1 <= decode_sel_coeffs_2_1 AND wr_enb;

  reg_coeffs_2_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_coeffs_2_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_coeffs_2_1 = '1' THEN
        data_reg_coeffs_2_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_coeffs_2_1_process;


  reg_enb_coeffs_3_1 <= decode_sel_coeffs_3_1 AND wr_enb;

  reg_coeffs_3_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_coeffs_3_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_coeffs_3_1 = '1' THEN
        data_reg_coeffs_3_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_coeffs_3_1_process;


  reg_enb_coeffs_4_1 <= decode_sel_coeffs_4_1 AND wr_enb;

  reg_coeffs_4_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_coeffs_4_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_coeffs_4_1 = '1' THEN
        data_reg_coeffs_4_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_coeffs_4_1_process;


  reg_enb_coeffs_5_1 <= decode_sel_coeffs_5_1 AND wr_enb;

  reg_coeffs_5_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_coeffs_5_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_coeffs_5_1 = '1' THEN
        data_reg_coeffs_5_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_coeffs_5_1_process;


  reg_enb_coeffs_6_1 <= decode_sel_coeffs_6_1 AND wr_enb;

  reg_coeffs_6_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_coeffs_6_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_coeffs_6_1 = '1' THEN
        data_reg_coeffs_6_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_coeffs_6_1_process;


  reg_enb_coeffs_7_1 <= decode_sel_coeffs_7_1 AND wr_enb;

  reg_coeffs_7_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_coeffs_7_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_coeffs_7_1 = '1' THEN
        data_reg_coeffs_7_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_coeffs_7_1_process;


  reg_enb_coeffs_8_1 <= decode_sel_coeffs_8_1 AND wr_enb;

  reg_coeffs_8_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_coeffs_8_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_coeffs_8_1 = '1' THEN
        data_reg_coeffs_8_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_coeffs_8_1_process;


  reg_enb_coeffs_9_1 <= decode_sel_coeffs_9_1 AND wr_enb;

  reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        strobe_reg_coeffs <= '0';
      ELSIF enb = '1' THEN
        strobe_reg_coeffs <= strobe_sw_coeffs;
      END IF;
    END IF;
  END PROCESS reg_process;


  reg_coeffs_9_1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        data_reg_coeffs_9_1 <= to_unsigned(0, 32);
      ELSIF enb = '1' AND reg_enb_coeffs_9_1 = '1' THEN
        data_reg_coeffs_9_1 <= data_write_unsigned;
      END IF;
    END IF;
  END PROCESS reg_coeffs_9_1_process;


  write_reg_coeffs(0) <= data_reg_coeffs_1_1;
  write_reg_coeffs(1) <= data_reg_coeffs_2_1;
  write_reg_coeffs(2) <= data_reg_coeffs_3_1;
  write_reg_coeffs(3) <= data_reg_coeffs_4_1;
  write_reg_coeffs(4) <= data_reg_coeffs_5_1;
  write_reg_coeffs(5) <= data_reg_coeffs_6_1;
  write_reg_coeffs(6) <= data_reg_coeffs_7_1;
  write_reg_coeffs(7) <= data_reg_coeffs_8_1;
  write_reg_coeffs(8) <= data_reg_coeffs_9_1;

  sync_reg_coeffs_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        sync_reg_coeffs_1 <= (OTHERS => to_unsigned(0, 32));
      ELSIF enb = '1' AND strobe_reg_coeffs = '1' THEN
        sync_reg_coeffs_1 <= write_reg_coeffs;
      END IF;
    END IF;
  END PROCESS sync_reg_coeffs_process;


  data_slice_coeffs_1_0 <= sync_reg_coeffs_1(0);

  
  decode_rd_coeffs_1_1 <= decode_rd_ip_timestamp_1_1 WHEN decode_sel_coeffs_1_1 = '0' ELSE
      data_slice_coeffs_1_0;

  data_slice_coeffs_1_1 <= sync_reg_coeffs_1(1);

  
  decode_rd_coeffs_1_2 <= decode_rd_coeffs_1_1 WHEN decode_sel_coeffs_2_1 = '0' ELSE
      data_slice_coeffs_1_1;

  data_slice_coeffs_1_2 <= sync_reg_coeffs_1(2);

  
  decode_rd_coeffs_1_3 <= decode_rd_coeffs_1_2 WHEN decode_sel_coeffs_3_1 = '0' ELSE
      data_slice_coeffs_1_2;

  data_slice_coeffs_1_3 <= sync_reg_coeffs_1(3);

  
  decode_rd_coeffs_1_4 <= decode_rd_coeffs_1_3 WHEN decode_sel_coeffs_4_1 = '0' ELSE
      data_slice_coeffs_1_3;

  data_slice_coeffs_1_4 <= sync_reg_coeffs_1(4);

  
  decode_rd_coeffs_1_5 <= decode_rd_coeffs_1_4 WHEN decode_sel_coeffs_5_1 = '0' ELSE
      data_slice_coeffs_1_4;

  data_slice_coeffs_1_5 <= sync_reg_coeffs_1(5);

  
  decode_rd_coeffs_1_6 <= decode_rd_coeffs_1_5 WHEN decode_sel_coeffs_6_1 = '0' ELSE
      data_slice_coeffs_1_5;

  data_slice_coeffs_1_6 <= sync_reg_coeffs_1(6);

  
  decode_rd_coeffs_1_7 <= decode_rd_coeffs_1_6 WHEN decode_sel_coeffs_7_1 = '0' ELSE
      data_slice_coeffs_1_6;

  data_slice_coeffs_1_7 <= sync_reg_coeffs_1(7);

  
  decode_rd_coeffs_1_8 <= decode_rd_coeffs_1_7 WHEN decode_sel_coeffs_8_1 = '0' ELSE
      data_slice_coeffs_1_7;

  data_slice_coeffs_1_8 <= sync_reg_coeffs_1(8);

  
  decode_rd_coeffs_1_9 <= decode_rd_coeffs_1_8 WHEN decode_sel_coeffs_9_1 = '0' ELSE
      data_slice_coeffs_1_8;

  data_read <= std_logic_vector(decode_rd_coeffs_1_9);

  write_axi_enable <= data_reg_axi_enable_1_1;

  write_axi4_stream_video_slave_hporch <= std_logic_vector(data_reg_axi4_stream_video_slave_hporch_1_1);

  write_axi4_stream_video_slave_vporch <= std_logic_vector(data_reg_axi4_stream_video_slave_vporch_1_1);

  write_coeffs_0 <= std_logic_vector(sync_reg_coeffs_1(0));

  write_coeffs_1 <= std_logic_vector(sync_reg_coeffs_1(1));

  write_coeffs_2 <= std_logic_vector(sync_reg_coeffs_1(2));

  write_coeffs_3 <= std_logic_vector(sync_reg_coeffs_1(3));

  write_coeffs_4 <= std_logic_vector(sync_reg_coeffs_1(4));

  write_coeffs_5 <= std_logic_vector(sync_reg_coeffs_1(5));

  write_coeffs_6 <= std_logic_vector(sync_reg_coeffs_1(6));

  write_coeffs_7 <= std_logic_vector(sync_reg_coeffs_1(7));

  write_coeffs_8 <= std_logic_vector(sync_reg_coeffs_1(8));

END rtl;

