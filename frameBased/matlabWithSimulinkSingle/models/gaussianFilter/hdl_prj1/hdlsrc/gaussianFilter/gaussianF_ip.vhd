-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj1\hdlsrc\gaussianFilter\gaussianF_ip.vhd
-- Created: 2024-06-04 12:57:18
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: -1
-- Target subsystem base rate: -1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: gaussianF_ip
-- Source Path: gaussianF_ip
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY gaussianF_ip IS
  PORT( IPCORE_CLK                        :   IN    std_logic;  -- ufix1
        IPCORE_RESETN                     :   IN    std_logic;  -- ufix1
        AXI4_Stream_Video_Master_TREADY   :   IN    std_logic;  -- ufix1
        AXI4_Stream_Video_Slave_TDATA     :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        AXI4_Stream_Video_Slave_TVALID    :   IN    std_logic;  -- ufix1
        AXI4_Stream_Video_Slave_TLAST     :   IN    std_logic;  -- ufix1
        AXI4_Stream_Video_Slave_TUSER     :   IN    std_logic;  -- ufix1
        AXI4_Lite_ACLK                    :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARESETN                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_AWADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_AWVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_WDATA                   :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_WSTRB                   :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
        AXI4_Lite_WVALID                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_BREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Lite_ARADDR                  :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        AXI4_Lite_ARVALID                 :   IN    std_logic;  -- ufix1
        AXI4_Lite_RREADY                  :   IN    std_logic;  -- ufix1
        AXI4_Stream_Video_Master_TDATA    :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
        AXI4_Stream_Video_Master_TVALID   :   OUT   std_logic;  -- ufix1
        AXI4_Stream_Video_Master_TLAST    :   OUT   std_logic;  -- ufix1
        AXI4_Stream_Video_Master_TUSER    :   OUT   std_logic;  -- ufix1
        AXI4_Stream_Video_Slave_TREADY    :   OUT   std_logic;  -- ufix1
        AXI4_Lite_AWREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_WREADY                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_BRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_BVALID                  :   OUT   std_logic;  -- ufix1
        AXI4_Lite_ARREADY                 :   OUT   std_logic;  -- ufix1
        AXI4_Lite_RDATA                   :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        AXI4_Lite_RRESP                   :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        AXI4_Lite_RVALID                  :   OUT   std_logic  -- ufix1
        );
END gaussianF_ip;


ARCHITECTURE rtl OF gaussianF_ip IS

  -- Component Declarations
  COMPONENT gaussianF_ip_reset_sync
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset_in                        :   IN    std_logic;  -- ufix1
          reset_out                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT gaussianF_ip_axi4_stream_video_slave
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          AXI4_Stream_Video_Slave_TDATA   :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          AXI4_Stream_Video_Slave_TVALID  :   IN    std_logic;  -- ufix1
          AXI4_Stream_Video_Slave_TLAST   :   IN    std_logic;  -- ufix1
          AXI4_Stream_Video_Slave_TUSER   :   IN    std_logic;  -- ufix1
          user_ready                      :   IN    std_logic;  -- ufix1
          write_axi4_stream_video_slave_hporch :   IN    std_logic_vector(12 DOWNTO 0);  -- ufix13
          write_axi4_stream_video_slave_vporch :   IN    std_logic_vector(12 DOWNTO 0);  -- ufix13
          AXI4_Stream_Video_Slave_TREADY  :   OUT   std_logic;  -- ufix1
          user_pixel                      :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
          user_valid                      :   OUT   std_logic;  -- ufix1
          adapter_active_frame            :   OUT   std_logic;  -- ufix1
          adapter_partial_frame           :   OUT   std_logic;  -- ufix1
          adapter_hPorch                  :   OUT   std_logic_vector(12 DOWNTO 0);  -- ufix13
          read_axi4_stream_video_slave_image_width :   OUT   std_logic_vector(12 DOWNTO 0);  -- ufix13
          read_axi4_stream_video_slave_image_height :   OUT   std_logic_vector(12 DOWNTO 0)  -- ufix13
          );
  END COMPONENT;

  COMPONENT gaussianF_ip_axi_lite
    PORT( reset                           :   IN    std_logic;
          AXI4_Lite_ACLK                  :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARESETN               :   IN    std_logic;  -- ufix1
          AXI4_Lite_AWADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_AWVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_WDATA                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_WSTRB                 :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          AXI4_Lite_WVALID                :   IN    std_logic;  -- ufix1
          AXI4_Lite_BREADY                :   IN    std_logic;  -- ufix1
          AXI4_Lite_ARADDR                :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          AXI4_Lite_ARVALID               :   IN    std_logic;  -- ufix1
          AXI4_Lite_RREADY                :   IN    std_logic;  -- ufix1
          read_axi4_stream_video_slave_image_width :   IN    std_logic_vector(12 DOWNTO 0);  -- ufix13
          read_axi4_stream_video_slave_image_height :   IN    std_logic_vector(12 DOWNTO 0);  -- ufix13
          read_ip_timestamp               :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_AWREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_WREADY                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_BRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_BVALID                :   OUT   std_logic;  -- ufix1
          AXI4_Lite_ARREADY               :   OUT   std_logic;  -- ufix1
          AXI4_Lite_RDATA                 :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          AXI4_Lite_RRESP                 :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          AXI4_Lite_RVALID                :   OUT   std_logic;  -- ufix1
          write_axi_enable                :   OUT   std_logic;  -- ufix1
          write_axi4_stream_video_slave_hporch :   OUT   std_logic_vector(12 DOWNTO 0);  -- ufix13
          write_axi4_stream_video_slave_vporch :   OUT   std_logic_vector(12 DOWNTO 0);  -- ufix13
          write_coeffs_0                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_coeffs_1                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_coeffs_2                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_coeffs_3                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_coeffs_4                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_coeffs_5                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_coeffs_6                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_coeffs_7                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          write_coeffs_8                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          reset_internal                  :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT gaussianF_ip_dut
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          dut_enable                      :   IN    std_logic;  -- ufix1
          imageIn                         :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          coeffs_0                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          coeffs_1                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          coeffs_2                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          coeffs_3                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          coeffs_4                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          coeffs_5                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          coeffs_6                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          coeffs_7                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          coeffs_8                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
          imageIn_valid                   :   IN    std_logic;  -- ufix1
          imageOut_ready                  :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          imageOut                        :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
          imageOut_valid                  :   OUT   std_logic;  -- ufix1
          imageIn_ready                   :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT gaussianF_ip_axi4_stream_video_master
    PORT( clk                             :   IN    std_logic;  -- ufix1
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          AXI4_Stream_Video_Master_TREADY :   IN    std_logic;  -- ufix1
          user_pixel                      :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          user_valid                      :   IN    std_logic;  -- ufix1
          adapter_active_frame            :   IN    std_logic;  -- ufix1
          adapter_partial_frame           :   IN    std_logic;  -- ufix1
          adapter_hPorch                  :   IN    std_logic_vector(12 DOWNTO 0);  -- ufix13
          AXI4_Stream_Video_Master_TDATA  :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
          AXI4_Stream_Video_Master_TVALID :   OUT   std_logic;  -- ufix1
          AXI4_Stream_Video_Master_TLAST  :   OUT   std_logic;  -- ufix1
          AXI4_Stream_Video_Master_TUSER  :   OUT   std_logic;  -- ufix1
          user_ready                      :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : gaussianF_ip_reset_sync
    USE ENTITY work.gaussianF_ip_reset_sync(rtl);

  FOR ALL : gaussianF_ip_axi4_stream_video_slave
    USE ENTITY work.gaussianF_ip_axi4_stream_video_slave(rtl);

  FOR ALL : gaussianF_ip_axi_lite
    USE ENTITY work.gaussianF_ip_axi_lite(rtl);

  FOR ALL : gaussianF_ip_dut
    USE ENTITY work.gaussianF_ip_dut(rtl);

  FOR ALL : gaussianF_ip_axi4_stream_video_master
    USE ENTITY work.gaussianF_ip_axi4_stream_video_master(rtl);

  -- Signals
  SIGNAL reset                            : std_logic;
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL reset_cm                         : std_logic;  -- ufix1
  SIGNAL ip_timestamp                     : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL top_user_pixel                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL top_user_pixel_unsigned          : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL imageIn_sig                      : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reset_internal                   : std_logic;  -- ufix1
  SIGNAL reset_before_sync                : std_logic;  -- ufix1
  SIGNAL imageIn_ready_sig                : std_logic;  -- ufix1
  SIGNAL write_axi4_stream_video_slave_hporch : std_logic_vector(12 DOWNTO 0);  -- ufix13
  SIGNAL write_axi4_stream_video_slave_vporch : std_logic_vector(12 DOWNTO 0);  -- ufix13
  SIGNAL top_user_valid                   : std_logic;  -- ufix1
  SIGNAL top_f2s_adapter_active_frame     : std_logic;  -- ufix1
  SIGNAL top_f2s_adapter_partial_frame    : std_logic;  -- ufix1
  SIGNAL top_f2s_adapter_hPorch           : std_logic_vector(12 DOWNTO 0);  -- ufix13
  SIGNAL read_axi4_stream_video_slave_image_width : std_logic_vector(12 DOWNTO 0);  -- ufix13
  SIGNAL read_axi4_stream_video_slave_image_height : std_logic_vector(12 DOWNTO 0);  -- ufix13
  SIGNAL AXI4_Lite_BRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL AXI4_Lite_RDATA_tmp              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL AXI4_Lite_RRESP_tmp              : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL write_axi_enable                 : std_logic;  -- ufix1
  SIGNAL write_coeffs_0                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_coeffs_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_coeffs_2                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_coeffs_3                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_coeffs_4                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_coeffs_5                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_coeffs_6                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_coeffs_7                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL write_coeffs_8                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL top_user_ready                   : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL imageOut_sig                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL imageOut_valid_sig               : std_logic;  -- ufix1
  SIGNAL imageOut_sig_unsigned            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL top_user_pixel_1                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL AXI4_Stream_Video_Master_TDATA_tmp : std_logic_vector(63 DOWNTO 0);  -- ufix64

BEGIN
  u_gaussianF_ip_reset_sync_inst : gaussianF_ip_reset_sync
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset_in => reset_before_sync,  -- ufix1
              reset_out => reset
              );

  u_gaussianF_ip_axi4_stream_video_slave_inst : gaussianF_ip_axi4_stream_video_slave
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              enb => const_1,
              AXI4_Stream_Video_Slave_TDATA => AXI4_Stream_Video_Slave_TDATA,  -- ufix64
              AXI4_Stream_Video_Slave_TVALID => AXI4_Stream_Video_Slave_TVALID,  -- ufix1
              AXI4_Stream_Video_Slave_TLAST => AXI4_Stream_Video_Slave_TLAST,  -- ufix1
              AXI4_Stream_Video_Slave_TUSER => AXI4_Stream_Video_Slave_TUSER,  -- ufix1
              user_ready => imageIn_ready_sig,  -- ufix1
              write_axi4_stream_video_slave_hporch => write_axi4_stream_video_slave_hporch,  -- ufix13
              write_axi4_stream_video_slave_vporch => write_axi4_stream_video_slave_vporch,  -- ufix13
              AXI4_Stream_Video_Slave_TREADY => AXI4_Stream_Video_Slave_TREADY,  -- ufix1
              user_pixel => top_user_pixel,  -- ufix64
              user_valid => top_user_valid,  -- ufix1
              adapter_active_frame => top_f2s_adapter_active_frame,  -- ufix1
              adapter_partial_frame => top_f2s_adapter_partial_frame,  -- ufix1
              adapter_hPorch => top_f2s_adapter_hPorch,  -- ufix13
              read_axi4_stream_video_slave_image_width => read_axi4_stream_video_slave_image_width,  -- ufix13
              read_axi4_stream_video_slave_image_height => read_axi4_stream_video_slave_image_height  -- ufix13
              );

  u_gaussianF_ip_axi_lite_inst : gaussianF_ip_axi_lite
    PORT MAP( reset => reset,
              AXI4_Lite_ACLK => AXI4_Lite_ACLK,  -- ufix1
              AXI4_Lite_ARESETN => AXI4_Lite_ARESETN,  -- ufix1
              AXI4_Lite_AWADDR => AXI4_Lite_AWADDR,  -- ufix16
              AXI4_Lite_AWVALID => AXI4_Lite_AWVALID,  -- ufix1
              AXI4_Lite_WDATA => AXI4_Lite_WDATA,  -- ufix32
              AXI4_Lite_WSTRB => AXI4_Lite_WSTRB,  -- ufix4
              AXI4_Lite_WVALID => AXI4_Lite_WVALID,  -- ufix1
              AXI4_Lite_BREADY => AXI4_Lite_BREADY,  -- ufix1
              AXI4_Lite_ARADDR => AXI4_Lite_ARADDR,  -- ufix16
              AXI4_Lite_ARVALID => AXI4_Lite_ARVALID,  -- ufix1
              AXI4_Lite_RREADY => AXI4_Lite_RREADY,  -- ufix1
              read_axi4_stream_video_slave_image_width => read_axi4_stream_video_slave_image_width,  -- ufix13
              read_axi4_stream_video_slave_image_height => read_axi4_stream_video_slave_image_height,  -- ufix13
              read_ip_timestamp => std_logic_vector(ip_timestamp),  -- ufix32
              AXI4_Lite_AWREADY => AXI4_Lite_AWREADY,  -- ufix1
              AXI4_Lite_WREADY => AXI4_Lite_WREADY,  -- ufix1
              AXI4_Lite_BRESP => AXI4_Lite_BRESP_tmp,  -- ufix2
              AXI4_Lite_BVALID => AXI4_Lite_BVALID,  -- ufix1
              AXI4_Lite_ARREADY => AXI4_Lite_ARREADY,  -- ufix1
              AXI4_Lite_RDATA => AXI4_Lite_RDATA_tmp,  -- ufix32
              AXI4_Lite_RRESP => AXI4_Lite_RRESP_tmp,  -- ufix2
              AXI4_Lite_RVALID => AXI4_Lite_RVALID,  -- ufix1
              write_axi_enable => write_axi_enable,  -- ufix1
              write_axi4_stream_video_slave_hporch => write_axi4_stream_video_slave_hporch,  -- ufix13
              write_axi4_stream_video_slave_vporch => write_axi4_stream_video_slave_vporch,  -- ufix13
              write_coeffs_0 => write_coeffs_0,  -- ufix32
              write_coeffs_1 => write_coeffs_1,  -- ufix32
              write_coeffs_2 => write_coeffs_2,  -- ufix32
              write_coeffs_3 => write_coeffs_3,  -- ufix32
              write_coeffs_4 => write_coeffs_4,  -- ufix32
              write_coeffs_5 => write_coeffs_5,  -- ufix32
              write_coeffs_6 => write_coeffs_6,  -- ufix32
              write_coeffs_7 => write_coeffs_7,  -- ufix32
              write_coeffs_8 => write_coeffs_8,  -- ufix32
              reset_internal => reset_internal  -- ufix1
              );

  u_gaussianF_ip_dut_inst : gaussianF_ip_dut
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              dut_enable => write_axi_enable,  -- ufix1
              imageIn => std_logic_vector(imageIn_sig),  -- ufix32
              coeffs_0 => write_coeffs_0,  -- ufix32
              coeffs_1 => write_coeffs_1,  -- ufix32
              coeffs_2 => write_coeffs_2,  -- ufix32
              coeffs_3 => write_coeffs_3,  -- ufix32
              coeffs_4 => write_coeffs_4,  -- ufix32
              coeffs_5 => write_coeffs_5,  -- ufix32
              coeffs_6 => write_coeffs_6,  -- ufix32
              coeffs_7 => write_coeffs_7,  -- ufix32
              coeffs_8 => write_coeffs_8,  -- ufix32
              imageIn_valid => top_user_valid,  -- ufix1
              imageOut_ready => top_user_ready,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              imageOut => imageOut_sig,  -- ufix32
              imageOut_valid => imageOut_valid_sig,  -- ufix1
              imageIn_ready => imageIn_ready_sig  -- ufix1
              );

  u_gaussianF_ip_axi4_stream_video_master_inst : gaussianF_ip_axi4_stream_video_master
    PORT MAP( clk => IPCORE_CLK,  -- ufix1
              reset => reset,
              enb => const_1,
              AXI4_Stream_Video_Master_TREADY => AXI4_Stream_Video_Master_TREADY,  -- ufix1
              user_pixel => std_logic_vector(top_user_pixel_1),  -- ufix64
              user_valid => imageOut_valid_sig,  -- ufix1
              adapter_active_frame => top_f2s_adapter_active_frame,  -- ufix1
              adapter_partial_frame => top_f2s_adapter_partial_frame,  -- ufix1
              adapter_hPorch => top_f2s_adapter_hPorch,  -- ufix13
              AXI4_Stream_Video_Master_TDATA => AXI4_Stream_Video_Master_TDATA_tmp,  -- ufix64
              AXI4_Stream_Video_Master_TVALID => AXI4_Stream_Video_Master_TVALID,  -- ufix1
              AXI4_Stream_Video_Master_TLAST => AXI4_Stream_Video_Master_TLAST,  -- ufix1
              AXI4_Stream_Video_Master_TUSER => AXI4_Stream_Video_Master_TUSER,  -- ufix1
              user_ready => top_user_ready  -- ufix1
              );

  const_1 <= '1';

  reset_cm <=  NOT IPCORE_RESETN;

  ip_timestamp <= unsigned'(X"8F6946A9");

  top_user_pixel_unsigned <= unsigned(top_user_pixel);

  imageIn_sig <= top_user_pixel_unsigned(31 DOWNTO 0);

  reset_before_sync <= reset_cm OR reset_internal;

  imageOut_sig_unsigned <= unsigned(imageOut_sig);

  top_user_pixel_1 <= resize(imageOut_sig_unsigned, 64);

  AXI4_Stream_Video_Master_TDATA <= AXI4_Stream_Video_Master_TDATA_tmp;

  AXI4_Lite_BRESP <= AXI4_Lite_BRESP_tmp;

  AXI4_Lite_RDATA <= AXI4_Lite_RDATA_tmp;

  AXI4_Lite_RRESP <= AXI4_Lite_RRESP_tmp;

END rtl;

