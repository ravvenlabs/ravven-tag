-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj1\hdlsrc\gaussianFilter\gaussianF_ip_axi4_stream_video_slave.vhd
-- Created: 2024-06-04 12:57:18
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: gaussianF_ip_axi4_stream_video_slave
-- Source Path: gaussianF_ip/gaussianF_ip_axi4_stream_video_slave
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY gaussianF_ip_axi4_stream_video_slave IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        AXI4_Stream_Video_Slave_TDATA     :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        AXI4_Stream_Video_Slave_TVALID    :   IN    std_logic;  -- ufix1
        AXI4_Stream_Video_Slave_TLAST     :   IN    std_logic;  -- ufix1
        AXI4_Stream_Video_Slave_TUSER     :   IN    std_logic;  -- ufix1
        user_ready                        :   IN    std_logic;  -- ufix1
        write_axi4_stream_video_slave_hporch :   IN    std_logic_vector(12 DOWNTO 0);  -- ufix13
        write_axi4_stream_video_slave_vporch :   IN    std_logic_vector(12 DOWNTO 0);  -- ufix13
        AXI4_Stream_Video_Slave_TREADY    :   OUT   std_logic;  -- ufix1
        user_pixel                        :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
        user_valid                        :   OUT   std_logic;  -- ufix1
        adapter_active_frame              :   OUT   std_logic;  -- ufix1
        adapter_partial_frame             :   OUT   std_logic;  -- ufix1
        adapter_hPorch                    :   OUT   std_logic_vector(12 DOWNTO 0);  -- ufix13
        read_axi4_stream_video_slave_image_width :   OUT   std_logic_vector(12 DOWNTO 0);  -- ufix13
        read_axi4_stream_video_slave_image_height :   OUT   std_logic_vector(12 DOWNTO 0)  -- ufix13
        );
END gaussianF_ip_axi4_stream_video_slave;


ARCHITECTURE rtl OF gaussianF_ip_axi4_stream_video_slave IS

  -- Component Declarations
  COMPONENT gaussianF_ip_fifo_eol
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic;  -- ufix1
          Push                            :   IN    std_logic;  -- ufix1
          Pop                             :   IN    std_logic;  -- ufix1
          Out_rsvd                        :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT gaussianF_ip_fifo_sof
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic;  -- ufix1
          Push                            :   IN    std_logic;  -- ufix1
          Pop                             :   IN    std_logic;  -- ufix1
          Out_rsvd                        :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT gaussianF_ip_adapter_in
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          stream_in_fifo_user_data        :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          stream_in_user_valid            :   IN    std_logic;  -- ufix1
          stream_in_user_sof              :   IN    std_logic;  -- ufix1
          stream_in_user_eol              :   IN    std_logic;  -- ufix1
          image_width                     :   IN    std_logic_vector(12 DOWNTO 0);  -- ufix13
          image_height                    :   IN    std_logic_vector(12 DOWNTO 0);  -- ufix13
          hporch                          :   IN    std_logic_vector(12 DOWNTO 0);  -- ufix13
          vporch                          :   IN    std_logic_vector(12 DOWNTO 0);  -- ufix13
          adapter_in_enable               :   IN    std_logic;  -- ufix1
          user_pixel                      :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
          user_hStart                     :   OUT   std_logic;  -- ufix1
          user_hEnd                       :   OUT   std_logic;  -- ufix1
          user_vStart                     :   OUT   std_logic;  -- ufix1
          user_vEnd                       :   OUT   std_logic;  -- ufix1
          adapter_in_valid_out            :   OUT   std_logic;  -- ufix1
          adapter_in_ready_out            :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  COMPONENT gaussianF_ip_fifo_data
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          In_rsvd                         :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          Push                            :   IN    std_logic;  -- ufix1
          Pop                             :   IN    std_logic;  -- ufix1
          Out_rsvd                        :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
          Empty                           :   OUT   std_logic;  -- ufix1
          Full                            :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : gaussianF_ip_fifo_eol
    USE ENTITY work.gaussianF_ip_fifo_eol(rtl);

  FOR ALL : gaussianF_ip_fifo_sof
    USE ENTITY work.gaussianF_ip_fifo_sof(rtl);

  FOR ALL : gaussianF_ip_adapter_in
    USE ENTITY work.gaussianF_ip_adapter_in(rtl);

  FOR ALL : gaussianF_ip_fifo_data
    USE ENTITY work.gaussianF_ip_fifo_data(rtl);

  -- Signals
  SIGNAL const_image_length               : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL const_image_height               : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL stream_in_user_ready             : std_logic;  -- ufix1
  SIGNAL stream_in_user_eol               : std_logic;  -- ufix1
  SIGNAL stream_in_user_sof               : std_logic;  -- ufix1
  SIGNAL fifo_empty                       : std_logic;  -- ufix1
  SIGNAL fifo_empty_neg                   : std_logic;  -- ufix1
  SIGNAL stream_in_user_valid             : std_logic;  -- ufix1
  SIGNAL stream_in_fifo_user_data         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL user_pixel_tmp                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL user_hStart                      : std_logic;  -- ufix1
  SIGNAL user_hEnd                        : std_logic;  -- ufix1
  SIGNAL user_vStart                      : std_logic;  -- ufix1
  SIGNAL user_vEnd                        : std_logic;  -- ufix1
  SIGNAL adapter_in_valid_out             : std_logic;  -- ufix1
  SIGNAL adapter_in_ready_out             : std_logic;  -- ufix1
  SIGNAL adapter_in_ready_out_delayed     : std_logic;  -- ufix1
  SIGNAL fifo_full                        : std_logic;  -- ufix1
  SIGNAL vht_valid                        : std_logic;  -- ufix1
  SIGNAL axi4_video_F2S_in_count          : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL axi4_video_F2S_in_state          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL axi4_video_F2S_in_count_next     : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL axi4_video_F2S_in_state_next     : unsigned(7 DOWNTO 0);  -- uint8

BEGIN
  u_gaussianF_ip_fifo_eol_inst : gaussianF_ip_fifo_eol
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In_rsvd => AXI4_Stream_Video_Slave_TLAST,  -- ufix1
              Push => AXI4_Stream_Video_Slave_TVALID,  -- ufix1
              Pop => stream_in_user_ready,  -- ufix1
              Out_rsvd => stream_in_user_eol  -- ufix1
              );

  u_gaussianF_ip_fifo_sof_inst : gaussianF_ip_fifo_sof
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In_rsvd => AXI4_Stream_Video_Slave_TUSER,  -- ufix1
              Push => AXI4_Stream_Video_Slave_TVALID,  -- ufix1
              Pop => stream_in_user_ready,  -- ufix1
              Out_rsvd => stream_in_user_sof  -- ufix1
              );

  u_gaussianF_ip_gaussianF_ip_axi4_stream_video_slave_gaussianF_ip_adapter_in : gaussianF_ip_adapter_in
    PORT MAP( clk => clk,
              reset => reset,
              stream_in_fifo_user_data => stream_in_fifo_user_data,  -- ufix64
              stream_in_user_valid => stream_in_user_valid,  -- ufix1
              stream_in_user_sof => stream_in_user_sof,  -- ufix1
              stream_in_user_eol => stream_in_user_eol,  -- ufix1
              image_width => std_logic_vector(const_image_length),  -- ufix13
              image_height => std_logic_vector(const_image_height),  -- ufix13
              hporch => write_axi4_stream_video_slave_hporch,  -- ufix13
              vporch => write_axi4_stream_video_slave_vporch,  -- ufix13
              adapter_in_enable => user_ready,  -- ufix1
              user_pixel => user_pixel_tmp,  -- ufix64
              user_hStart => user_hStart,  -- ufix1
              user_hEnd => user_hEnd,  -- ufix1
              user_vStart => user_vStart,  -- ufix1
              user_vEnd => user_vEnd,  -- ufix1
              adapter_in_valid_out => adapter_in_valid_out,  -- ufix1
              adapter_in_ready_out => adapter_in_ready_out  -- ufix1
              );

  u_gaussianF_ip_fifo_data_inst : gaussianF_ip_fifo_data
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              In_rsvd => AXI4_Stream_Video_Slave_TDATA,  -- ufix64
              Push => AXI4_Stream_Video_Slave_TVALID,  -- ufix1
              Pop => stream_in_user_ready,  -- ufix1
              Out_rsvd => stream_in_fifo_user_data,  -- ufix64
              Empty => fifo_empty,  -- ufix1
              Full => fifo_full  -- ufix1
              );

  const_image_length <= to_unsigned(16#02F0#, 13);

  const_image_height <= to_unsigned(16#01E0#, 13);

  fifo_empty_neg <=  NOT fifo_empty;

  stream_in_user_valid <= fifo_empty_neg AND stream_in_user_ready;

  reg_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        adapter_in_ready_out_delayed <= '0';
      ELSIF enb = '1' THEN
        adapter_in_ready_out_delayed <= adapter_in_ready_out;
      END IF;
    END IF;
  END PROCESS reg_process;


  stream_in_user_ready <= user_ready AND adapter_in_ready_out_delayed;

  AXI4_Stream_Video_Slave_TREADY <=  NOT fifo_full;

  vht_valid <= user_ready AND adapter_in_valid_out;

  axi4_video_F2S_in_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        axi4_video_F2S_in_count <= to_unsigned(16#00000#, 19);
        axi4_video_F2S_in_state <= to_unsigned(16#00#, 8);
      ELSIF enb = '1' THEN
        axi4_video_F2S_in_count <= axi4_video_F2S_in_count_next;
        axi4_video_F2S_in_state <= axi4_video_F2S_in_state_next;
      END IF;
    END IF;
  END PROCESS axi4_video_F2S_in_process;

  axi4_video_F2S_in_output : PROCESS (axi4_video_F2S_in_count, axi4_video_F2S_in_state, user_vStart, vht_valid)
    VARIABLE user_vStart1 : std_logic;
    VARIABLE vht_valid1 : std_logic;
  BEGIN
    axi4_video_F2S_in_count_next <= axi4_video_F2S_in_count;
    axi4_video_F2S_in_state_next <= axi4_video_F2S_in_state;
    user_vStart1 := user_vStart;
    vht_valid1 := vht_valid;
    CASE axi4_video_F2S_in_state IS
      WHEN "00000000" =>
        adapter_active_frame <= '0';
        adapter_partial_frame <= '0';
        IF user_vStart1 = '1' THEN 
          axi4_video_F2S_in_state_next <= to_unsigned(16#01#, 8);
          IF vht_valid1 = '1' THEN 
            user_valid <= '1';
            axi4_video_F2S_in_count_next <= to_unsigned(16#00001#, 19);
          ELSE 
            user_valid <= '0';
            axi4_video_F2S_in_count_next <= to_unsigned(16#00000#, 19);
          END IF;
        ELSE 
          user_valid <= '0';
          axi4_video_F2S_in_count_next <= to_unsigned(16#00000#, 19);
        END IF;
      WHEN "00000001" =>
        adapter_active_frame <= '1';
        adapter_partial_frame <= '0';
        IF resize(axi4_video_F2S_in_count, 32) < to_unsigned(360960, 32) THEN 
          IF user_vStart1 = '1' THEN 
            axi4_video_F2S_in_state_next <= to_unsigned(16#02#, 8);
            user_valid <= '0';
          ELSIF vht_valid1 = '1' THEN 
            user_valid <= '1';
            axi4_video_F2S_in_count_next <= axi4_video_F2S_in_count + to_unsigned(16#00001#, 19);
          ELSE 
            user_valid <= '0';
          END IF;
        ELSE 
          axi4_video_F2S_in_state_next <= to_unsigned(16#00#, 8);
          user_valid <= '0';
          axi4_video_F2S_in_count_next <= to_unsigned(16#00000#, 19);
        END IF;
      WHEN "00000010" =>
        adapter_active_frame <= '0';
        adapter_partial_frame <= '1';
        IF resize(axi4_video_F2S_in_count, 32) = to_unsigned(360960, 32) THEN 
          user_valid <= '0';
          axi4_video_F2S_in_state_next <= to_unsigned(16#00#, 8);
          axi4_video_F2S_in_count_next <= to_unsigned(16#00000#, 19);
        ELSE 
          user_valid <= '1';
          axi4_video_F2S_in_count_next <= axi4_video_F2S_in_count + to_unsigned(16#00001#, 19);
        END IF;
      WHEN OTHERS => 
        axi4_video_F2S_in_state_next <= to_unsigned(16#00#, 8);
        user_valid <= '0';
        adapter_active_frame <= '0';
        adapter_partial_frame <= '0';
    END CASE;
  END PROCESS axi4_video_F2S_in_output;


  read_axi4_stream_video_slave_image_width <= std_logic_vector(const_image_length);

  read_axi4_stream_video_slave_image_height <= std_logic_vector(const_image_height);

  user_pixel <= user_pixel_tmp;

  adapter_hPorch <= write_axi4_stream_video_slave_hporch;

END rtl;

